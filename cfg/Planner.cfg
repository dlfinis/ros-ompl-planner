#!/usr/bin/env python
PACKAGE = "ompl_global_planner_base"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# planner_enum = gen.enum([ 
#   gen.const("KPIECE",      int_t, 0, "KPIECE"),
#   gen.const("PRM",     int_t, 1, "PRM"),
#   gen.const("LazyPRM",      int_t, 2, "LazyPRM"),
#   gen.const("RRT",      int_t, 3, "RRT"),
#   gen.const("RRTconnect",      int_t, 4, "RRTconnect"),
#   gen.const("RRTstar",      int_t, 5, "RRTstar")
#   ],"An enum for choose a planner")

# gen.add("frame_id", str_t, 0 ,"The frame in which laser scans will be returned", "base_footprint")
# gen.add("ompl_planner", int_t, 0 , "Planner", 3 , 0 , 5 ,edit_method=planner_enum)
# gen.add("collision_check_res", double_t, 0 , "Collision Check", 1.0,  0.0, 1.0)
# gen.add("max_planning_time", double_t, 0 , "Max Planning", 0.0, 1.0, 10)
# gen.add("max_simplification_time", double_t, 0 , "Max Simplification", -1.0, -1.0 , 5.0)
# gen.add("path_simplifier", double_t, 0 , "Path Simplifier", -1.0, -1.0 , 5.0)
# gen.add("border_fraction", double_t , 0 ,"Border Fraction", 0.9 , 0.0 , 2.0)
# gen.add("goal_bias", double_t, 0 , "Goal Bias", 0.5, 0.0 , 2.0)
# gen.add("range",  double_t, 0 , "Range", 1.0, 0.0 , 5.0)
# gen.add("max_nearest_neighbors", int_t , 0,  "Max Nearest", 10,1,50)
# gen.add("thr_similarity", double_t, 0 , "THR Similarity", 0.5, 0.10 , 2)


# gen.add("frame_id", str_t, 0 ,"The frame in which laser scans will be returned", "odom")
# # gen.add("ompl_planner", int_t, 0 , "Planner", 1 , 0 , 5 ,edit_method=planner_enum)
# gen.add("ompl_planner", str_t, 0 , "Planner", "RRT")
# gen.add("collision_check_res", double_t, 0 , "Collision Check", 0.025,  0.01, 0.9)
# gen.add("max_planning_time", double_t, 0 , "Max Planning", 0.15, 0.0, 10)
# gen.add("max_simplification_time", double_t, 0 , "Max Simplification", 0.25, -1.0 , 5.0)
# gen.add("path_simplifier", double_t, 0 , "Path Simplifier", 0.5, -1.0 , 5.0)
# gen.add("border_fraction", double_t , 0 ,"Border Fraction", 0.9 , 0.0 , 2.0)
# gen.add("goal_bias", double_t, 0 , "Goal Bias", 0.5, 0.0 , 2.0)
# gen.add("range",  double_t, 0 , "Range", 0.10, 0.0 , 5.0)
# gen.add("max_nearest_neighbors", int_t , 0,  "Max Nearest", 1,1,15)
# gen.add("thr_similarity", double_t, 0 , "THR Similarity", 0.5, 0.10 , 2)


gen.add("frame_id", str_t, 0, "Global frame", "map")

ompl_planner_enum = gen.enum([gen.const("KPIECE",  str_t, "KPIECE", "KPIECE"),
                              gen.const("PRM",  str_t, "PRM", "PRM"),
                              gen.const("LazyPRM",  str_t, "LazyPRM", "LazyPRM"),
                              gen.const("RRT",  str_t, "RRT", "RRT"),
                              gen.const("RRTconnect",  str_t, "RRTconnect", "RRTconnect"),
                              gen.const("RRTstar",  str_t, "RRTstar", "RRTstar")],
                              "An enum to set ompl_planner.")

path_simplifier_enum = gen.enum([gen.const("none",  str_t, "none", "none"),
                              	 gen.const("simple",  str_t, "simple", "simple"),
                              	 gen.const("full",  str_t, "full", "full")],
                              	 "An enum to set path_simplifier.")

gen.add("ompl_planner", str_t, 0, "OMPL global planner", "RRT", edit_method=ompl_planner_enum)
gen.add("max_planning_time", double_t, 0, "Max time for planning", 0.5, 0.1, 10.0)
gen.add("max_simplification_time", double_t, 0, "Max time to simplify path", 0.1, 0.0, 1.0)
gen.add("collision_check_res", double_t,0, "Collision checking resolution", 0.01, 0.001, 1.0)
gen.add("path_simplifier", str_t, 0, "Path simplifier", "simple", edit_method=path_simplifier_enum)
gen.add("thr_similarity", double_t,0, "Similarity threshold (only for EGP)", 10.0, 0.0, 100.0)

gen.add("border_fraction", double_t, 0, "Fraction of time for focusing on the border", 0.9, 0.0, 1.0)
gen.add("goal_bias", double_t, 0, "Probability to sample the goal", 0.05, 0.0, 1.0)
gen.add("range", double_t, 0, "Maximum length of a motion", 0.5, 0.0, 5.0)
gen.add("max_nearest_neighbors", int_t, 0, "Max nearest neighbors", 8, 8, 20)

exit(gen.generate(PACKAGE, "ompl_global_planner_base", "Planner"))
